import fs from "fs";
import path from "path";
import { Fn, Duration as CdkDuration, RemovalPolicy, CustomResource, } from "aws-cdk-lib/core";
import { Effect, Policy, PolicyStatement } from "aws-cdk-lib/aws-iam";
import { RetentionDays } from "aws-cdk-lib/aws-logs";
import { Function as CdkFunction, Code, Runtime, Architecture, FunctionUrlAuthType, } from "aws-cdk-lib/aws-lambda";
import { Distribution, ViewerProtocolPolicy, AllowedMethods, LambdaEdgeEventType, CachedMethods, CachePolicy, } from "aws-cdk-lib/aws-cloudfront";
import { S3Origin, HttpOrigin, OriginGroup, } from "aws-cdk-lib/aws-cloudfront-origins";
import { Rule, Schedule } from "aws-cdk-lib/aws-events";
import { LambdaFunction } from "aws-cdk-lib/aws-events-targets";
import { Queue } from "aws-cdk-lib/aws-sqs";
import { SqsEventSource } from "aws-cdk-lib/aws-lambda-event-sources";
import { Stack } from "./Stack.js";
import { SsrFunction } from "./SsrFunction.js";
import { EdgeFunction } from "./EdgeFunction.js";
import { SsrSite } from "./SsrSite.js";
import { toCdkSize } from "./util/size.js";
import { toCdkDuration } from "./util/duration.js";
/**
 * The `NextjsSite` construct is a higher level CDK construct that makes it easy to create a Next.js app.
 * @example
 * Deploys a Next.js app in the `my-next-app` directory.
 *
 * ```js
 * new NextjsSite(stack, "web", {
 *   path: "my-next-app/",
 * });
 * ```
 */
export class NextjsSite extends SsrSite {
    constructor(scope, id, props) {
        super(scope, id, {
            buildCommand: "npx --yes open-next@2.0.0 build",
            ...props,
        });
        if (this.doNotDeploy)
            return;
        this.createWarmer();
        this.createRevalidation();
    }
    createRevalidation() {
        if (!this.serverLambdaForRegional && !this.serverLambdaForEdge)
            return;
        const queue = new Queue(this, "RevalidationQueue", {
            fifo: true,
            receiveMessageWaitTime: CdkDuration.seconds(20),
        });
        const consumer = new CdkFunction(this, "RevalidationFunction", {
            description: "Next.js revalidator",
            handler: "index.handler",
            code: Code.fromAsset(path.join(this.props.path, ".open-next", "revalidation-function")),
            runtime: Runtime.NODEJS_18_X,
            timeout: CdkDuration.seconds(30),
        });
        consumer.addEventSource(new SqsEventSource(queue, { batchSize: 5 }));
        // Allow server to send messages to the queue
        const server = this.serverLambdaForRegional || this.serverLambdaForEdge;
        server?.addEnvironment("REVALIDATION_QUEUE_URL", queue.queueUrl);
        server?.addEnvironment("REVALIDATION_QUEUE_REGION", Stack.of(this).region);
        queue.grantSendMessages(server?.role);
    }
    initBuildConfig() {
        return {
            typesPath: ".",
            serverBuildOutputFile: ".open-next/server-function/index.mjs",
            clientBuildOutputDir: ".open-next/assets",
            clientBuildVersionedSubDir: "_next",
            clientBuildS3KeyPrefix: "_assets",
            prerenderedBuildOutputDir: ".open-next/cache",
            prerenderedBuildS3KeyPrefix: "_cache",
        };
    }
    createFunctionForRegional() {
        const { runtime, timeout, memorySize, bind, permissions, environment, cdk, } = this.props;
        const ssrFn = new SsrFunction(this, `ServerFunction`, {
            description: "Next.js server",
            bundle: path.join(this.props.path, ".open-next", "server-function"),
            handler: "index.handler",
            runtime,
            timeout,
            memorySize,
            bind,
            permissions,
            environment: {
                ...environment,
                CACHE_BUCKET_NAME: this.bucket.bucketName,
                CACHE_BUCKET_KEY_PREFIX: "_cache",
                CACHE_BUCKET_REGION: Stack.of(this).region,
            },
            ...cdk?.server,
        });
        return ssrFn.function;
    }
    createFunctionForEdge() {
        const { runtime, timeout, memorySize, bind, permissions, environment } = this.props;
        return new EdgeFunction(this, "ServerFunction", {
            bundle: path.join(this.props.path, ".open-next", "server-function"),
            handler: "index.handler",
            runtime,
            timeout,
            memorySize,
            bind,
            permissions,
            environment: {
                ...environment,
                CACHE_BUCKET_NAME: this.bucket.bucketName,
                CACHE_BUCKET_KEY_PREFIX: "_cache",
                CACHE_BUCKET_REGION: Stack.of(this).region,
            },
        });
    }
    createImageOptimizationFunction() {
        const { imageOptimization, path: sitePath } = this.props;
        return new CdkFunction(this, `ImageFunction`, {
            description: "Next.js image optimizer",
            handler: "index.handler",
            currentVersionOptions: {
                removalPolicy: RemovalPolicy.DESTROY,
            },
            logRetention: RetentionDays.THREE_DAYS,
            code: Code.fromAsset(path.join(sitePath, ".open-next/image-optimization-function")),
            runtime: Runtime.NODEJS_18_X,
            memorySize: imageOptimization?.memorySize
                ? typeof imageOptimization.memorySize === "string"
                    ? toCdkSize(imageOptimization.memorySize).toMebibytes()
                    : imageOptimization.memorySize
                : 1536,
            timeout: CdkDuration.seconds(25),
            architecture: Architecture.ARM_64,
            environment: {
                BUCKET_NAME: this.cdk.bucket.bucketName,
                BUCKET_KEY_PREFIX: "_assets",
            },
            initialPolicy: [
                new PolicyStatement({
                    actions: ["s3:GetObject"],
                    resources: [this.cdk.bucket.arnForObjects("*")],
                }),
            ],
        });
    }
    createWarmer() {
        const { warm, edge } = this.props;
        if (!warm)
            return;
        if (warm && edge) {
            throw new Error(`Warming is currently supported only for the regional mode.`);
        }
        if (!this.serverLambdaForRegional)
            return;
        // Create warmer function
        const warmer = new CdkFunction(this, "WarmerFunction", {
            description: "Next.js warmer",
            code: Code.fromAsset(path.join(this.props.path, ".open-next/warmer-function")),
            runtime: Runtime.NODEJS_18_X,
            handler: "index.handler",
            timeout: CdkDuration.minutes(15),
            memorySize: 1024,
            environment: {
                FUNCTION_NAME: this.serverLambdaForRegional.functionName,
                CONCURRENCY: warm.toString(),
            },
        });
        this.serverLambdaForRegional.grantInvoke(warmer);
        // Create cron job
        new Rule(this, "WarmerRule", {
            schedule: Schedule.rate(CdkDuration.minutes(5)),
            targets: [new LambdaFunction(warmer, { retryAttempts: 0 })],
        });
        // Create custom resource to prewarm on deploy
        const stack = Stack.of(this);
        const policy = new Policy(this, "PrewarmerPolicy", {
            statements: [
                new PolicyStatement({
                    effect: Effect.ALLOW,
                    actions: ["lambda:InvokeFunction"],
                    resources: [warmer.functionArn],
                }),
            ],
        });
        stack.customResourceHandler.role?.attachInlinePolicy(policy);
        const resource = new CustomResource(this, "Prewarmer", {
            serviceToken: stack.customResourceHandler.functionArn,
            resourceType: "Custom::FunctionInvoker",
            properties: {
                version: Date.now().toString(),
                functionName: warmer.functionName,
            },
        });
        resource.node.addDependency(policy);
    }
    createCloudFrontDistributionForRegional() {
        /**
         * Next.js requests
         *
         * - Public asset
         *  Use case: When you request an asset in /public
         *  Request: /myImage.png
         *  Response cache:
         *  - Cache-Control: public, max-age=0, must-revalidate
         *  - x-vercel-cache: MISS (1st request)
         *  - x-vercel-cache: HIT (2nd request)
         *
         * - SSG page
         *  Use case: When you request an SSG page directly
         *  Request: /myPage
         *  Response cache:
         *  - Cache-Control: public, max-age=0, must-revalidate
         *  - Content-Encoding: br
         *  - x-vercel-cache: HIT (2nd request, not set for 1st request)
         *
         * - SSR page (directly)
         *  Use case: When you request an SSR page directly
         *  Request: /myPage
         *  Response cache:
         *  - Cache-Control: private, no-cache, no-store, max-age=0, must-revalidate
         *  - x-vercel-cache: MISS
         *
         * - SSR pages (user transition)
         *  Use case: When the page uses getServerSideProps(), and you request this page on
         *            client-side page trasitions. Next.js sends an API request to the server,
         *            which runs getServerSideProps()
         *  Request: /_next/data/_-fpIB1rqWyRD-EJO59pO/myPage.json
         *  Response cache:
         *  - Cache-Control: private, no-cache, no-store, max-age=0, must-revalidate
         *  - x-vercel-cache: MISS
         *
         * - Image optimization
         *  Use case: when you request an image
         *  Request: /_next/image?url=%2F_next%2Fstatic%2Fmedia%2F4600x4600.ce39e3d6.jpg&w=256&q=75
         *  Response cache:
         *    - Cache-Control: public, max-age=31536000, immutable
         *    - x-vercel-cache: HIT
         *
         * - API
         *  Use case: when you request an API endpoint
         *  Request: /api/hello
         *  Response cache:
         *    - Cache-Control: public, max-age=0, must-revalidate
         *    - x-vercel-cache: MISS
         */
        const { timeout, cdk } = this.props;
        const cfDistributionProps = cdk?.distribution || {};
        const s3Origin = new S3Origin(this.cdk.bucket, {
            originPath: "/" + this.buildConfig.clientBuildS3KeyPrefix,
        });
        const serverFnUrl = this.serverLambdaForRegional.addFunctionUrl({
            authType: FunctionUrlAuthType.NONE,
        });
        const serverOrigin = new HttpOrigin(Fn.parseDomainName(serverFnUrl.url), {
            readTimeout: typeof timeout === "string"
                ? toCdkDuration(timeout)
                : CdkDuration.seconds(timeout),
        });
        const cachePolicy = cdk?.serverCachePolicy ??
            this.buildServerCachePolicy([
                "accept",
                "rsc",
                "next-router-prefetch",
                "next-router-state-tree",
            ]);
        const originRequestPolicy = this.buildServerOriginRequestPolicy();
        const serverBehavior = this.buildServerBehaviorForRegional(serverOrigin, cachePolicy, originRequestPolicy);
        return new Distribution(this, "Distribution", {
            // these values can be overwritten by cfDistributionProps
            defaultRootObject: "",
            // Override props.
            ...cfDistributionProps,
            // these values can NOT be overwritten by cfDistributionProps
            domainNames: this.buildDistributionDomainNames(),
            certificate: this.cdk.certificate,
            defaultBehavior: this.buildDefaultNextjsBehaviorForRegional(serverOrigin, s3Origin, cachePolicy, originRequestPolicy),
            additionalBehaviors: {
                "api/*": serverBehavior,
                "_next/data/*": serverBehavior,
                "_next/image*": this.buildImageBehavior(cachePolicy),
                "_next/*": this.buildStaticFileBehavior(s3Origin),
                ...(cfDistributionProps.additionalBehaviors || {}),
            },
        });
    }
    createCloudFrontDistributionForEdge() {
        const { cdk } = this.props;
        const cfDistributionProps = cdk?.distribution || {};
        const s3Origin = new S3Origin(this.cdk.bucket, {
            originPath: "/" + this.buildConfig.clientBuildS3KeyPrefix,
        });
        const cachePolicy = cdk?.serverCachePolicy ??
            this.buildServerCachePolicy([
                "accept",
                "rsc",
                "next-router-prefetch",
                "next-router-state-tree",
            ]);
        const originRequestPolicy = this.buildServerOriginRequestPolicy();
        const functionVersion = this.serverLambdaForEdge.currentVersion;
        const serverBehavior = this.buildServerBehaviorForEdge(functionVersion, s3Origin, cachePolicy, originRequestPolicy);
        return new Distribution(this, "Distribution", {
            // these values can be overwritten by cfDistributionProps
            defaultRootObject: "",
            // Override props.
            ...cfDistributionProps,
            // these values can NOT be overwritten by cfDistributionProps
            domainNames: this.buildDistributionDomainNames(),
            certificate: this.cdk.certificate,
            defaultBehavior: this.buildDefaultNextjsBehaviorForEdge(functionVersion, s3Origin, cachePolicy, originRequestPolicy),
            additionalBehaviors: {
                "api/*": serverBehavior,
                "_next/data/*": serverBehavior,
                "_next/image*": this.buildImageBehavior(cachePolicy),
                "_next/*": this.buildStaticFileBehavior(s3Origin),
                ...(cfDistributionProps.additionalBehaviors || {}),
            },
        });
    }
    buildServerBehaviorForRegional(serverOrigin, cachePolicy, originRequestPolicy) {
        const { cdk } = this.props;
        return {
            viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
            functionAssociations: this.buildBehaviorFunctionAssociations(),
            origin: serverOrigin,
            allowedMethods: AllowedMethods.ALLOW_ALL,
            cachedMethods: CachedMethods.CACHE_GET_HEAD_OPTIONS,
            compress: true,
            cachePolicy,
            responseHeadersPolicy: cdk?.responseHeadersPolicy,
            originRequestPolicy,
        };
    }
    buildServerBehaviorForEdge(functionVersion, s3Origin, cachePolicy, originRequestPolicy) {
        const { cdk } = this.props;
        return {
            viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
            functionAssociations: this.buildBehaviorFunctionAssociations(),
            origin: s3Origin,
            allowedMethods: AllowedMethods.ALLOW_ALL,
            cachedMethods: CachedMethods.CACHE_GET_HEAD_OPTIONS,
            compress: true,
            cachePolicy,
            responseHeadersPolicy: cdk?.responseHeadersPolicy,
            originRequestPolicy,
            edgeLambdas: [
                {
                    includeBody: true,
                    eventType: LambdaEdgeEventType.ORIGIN_REQUEST,
                    functionVersion,
                },
            ],
        };
    }
    buildImageBehavior(cachePolicy) {
        const { cdk } = this.props;
        const imageFn = this.createImageOptimizationFunction();
        const imageFnUrl = imageFn.addFunctionUrl({
            authType: FunctionUrlAuthType.NONE,
        });
        return {
            viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
            origin: new HttpOrigin(Fn.parseDomainName(imageFnUrl.url)),
            allowedMethods: AllowedMethods.ALLOW_ALL,
            cachedMethods: CachedMethods.CACHE_GET_HEAD_OPTIONS,
            compress: true,
            cachePolicy,
            responseHeadersPolicy: cdk?.responseHeadersPolicy,
        };
    }
    buildStaticFileBehavior(s3Origin) {
        const { cdk } = this.props;
        return {
            origin: s3Origin,
            viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
            allowedMethods: AllowedMethods.ALLOW_GET_HEAD_OPTIONS,
            cachedMethods: CachedMethods.CACHE_GET_HEAD_OPTIONS,
            compress: true,
            cachePolicy: CachePolicy.CACHING_OPTIMIZED,
            responseHeadersPolicy: cdk?.responseHeadersPolicy,
        };
    }
    buildDefaultNextjsBehaviorForRegional(serverOrigin, s3Origin, cachePolicy, originRequestPolicy) {
        // Create default behavior
        // default handler for requests that don't match any other path:
        //   - try lambda handler first
        //   - if failed, fall back to S3
        const { cdk } = this.props;
        const cfDistributionProps = cdk?.distribution || {};
        const fallbackOriginGroup = new OriginGroup({
            primaryOrigin: serverOrigin,
            fallbackOrigin: s3Origin,
            fallbackStatusCodes: [503],
        });
        return {
            origin: fallbackOriginGroup,
            viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
            functionAssociations: this.buildBehaviorFunctionAssociations(),
            compress: true,
            cachePolicy,
            responseHeadersPolicy: cdk?.responseHeadersPolicy,
            originRequestPolicy,
            ...(cfDistributionProps.defaultBehavior || {}),
        };
    }
    buildDefaultNextjsBehaviorForEdge(functionVersion, s3Origin, cachePolicy, originRequestPolicy) {
        const { cdk } = this.props;
        const cfDistributionProps = cdk?.distribution || {};
        return {
            viewerProtocolPolicy: ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
            functionAssociations: this.buildBehaviorFunctionAssociations(),
            origin: s3Origin,
            allowedMethods: AllowedMethods.ALLOW_ALL,
            cachedMethods: CachedMethods.CACHE_GET_HEAD_OPTIONS,
            compress: true,
            cachePolicy,
            responseHeadersPolicy: cdk?.responseHeadersPolicy,
            originRequestPolicy,
            ...(cfDistributionProps.defaultBehavior || {}),
            edgeLambdas: [
                {
                    includeBody: true,
                    eventType: LambdaEdgeEventType.ORIGIN_REQUEST,
                    functionVersion,
                },
                ...(cfDistributionProps.defaultBehavior?.edgeLambdas || []),
            ],
        };
    }
    generateBuildId() {
        const filePath = path.join(this.props.path, ".next/BUILD_ID");
        return fs.readFileSync(filePath).toString();
    }
    getConstructMetadata() {
        return {
            type: "NextjsSite",
            ...this.getConstructMetadataBase(),
        };
    }
}
